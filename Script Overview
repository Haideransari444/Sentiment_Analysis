.
├── data_cleaning.py
├── sentiment_analysis.py
├── Cleaned_whatsapp.csv (Generated by data_cleaning.py)
├── Reviewdf_with_sentiment.csv (Generated by sentiment_analysis.py)
└── README.md



Overview

This project focuses on analyzing sentiment from WhatsApp chat data. It includes two main scripts: one for cleaning the data and another for performing sentiment analysis. The cleaned data is then analyzed to categorize sentiments into different emotional states.
Scripts

    Data Cleaning Script
    Sentiment Analysis Script

1. Data Cleaning Script
Script: data_cleaning.py

This script is designed to clean WhatsApp chat data by handling missing values and removing non-alphanumeric characters from messages. The cleaned data is then saved to a CSV file.

Functions:

    Handling Missing Values:
        Replaces occurrences of the string '<Media omitted>' in the 'message' column with NaN.
        Drops rows where the 'message' column has NaN values.

    Cleaning Text:
        Removes any character that is not a letter, digit, or whitespace.
        Removes extra spaces and trims leading and trailing spaces.

    Saving to CSV:
        Saves the cleaned DataFrame to a CSV file without the index.
        Prints a confirmation message with the number of messages saved.

Main Execution:

    Reads WhatsApp chat data from a CSV file into a DataFrame.
    Cleans the data by handling missing values and applying text cleaning.
    Saves the cleaned data to a new CSV file.

2. Sentiment Analysis Script
Script: sentiment_analysis.py

This script processes the cleaned WhatsApp chat data to analyze sentiments. It converts messages to lowercase, calculates sentiment scores using the TextBlob library, categorizes the sentiments, and saves the results to a CSV file.

Steps:

    Reading the Cleaned Data:
        Reads the cleaned chat data from a CSV file.

    Converting Messages to Lowercase:
        Converts all messages to lowercase for uniformity.

    Dropping NaN Values:
        Drops any rows where 'clean_message' is NaN.

    Calculating Sentiment Scores:
        Calculates the sentiment polarity score for each message using the TextBlob library.

    Categorizing Sentiments:
        Categorizes the sentiment based on the polarity score into:
            happy for scores >= 0.5
            angry for scores <= -0.5
            bad for scores < 0
            neutral for scores between 0 and 0.5

    Saving Results to CSV:
        Saves the DataFrame with sentiment scores and categories to a new CSV file.

Dependencies

    pandas
    numpy
    re
    textblob
